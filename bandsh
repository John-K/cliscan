#!/usr/bin/env python

import argparse
import cmd
import datetime
import logging as log
import os
import struct
import subprocess
import sys
import time

import hello.band

log.basicConfig(level=log.DEBUG)

class BandCmd(cmd.Cmd):
    def __init__(self, band):
        self.band = band
        cmd.Cmd.__init__(self)  # can't use super since cmd.Cmd is an old-style class
        self.start_time = datetime.datetime.now()
        self.prompt = '%s> ' % self.band.name

    # HRS

    hrs_parser = argparse.ArgumentParser()
    hrs_parser.add_argument(
        '-w', '--overwrite',
        action='store_true',
        help='Overwrite the output CSV file, instead of appending to it. (See below')
    hrs_parser.add_argument(
        'power_level', 
        type=int,
        help='from [0, 100]. The higher this number, the brighter the LED will be.')
    hrs_parser.add_argument(
        'samples', 
        type=int,
        help='the number of samples to take. The sampling rate is fixed at 100Hz, so 100 samples = 1 second.')
    hrs_parser.add_argument(
        '--led',
        action='store_true',
        help='Keep the LED on after sampling.')
    hrs_parser.add_argument(
        'delay',
        type=int,
        nargs='?',
        default=0,
        help='This is the delay after turning on the LED, but before sampling. 1000 milliseconds = 1 second.'
    )

    def _csv_basename(self, power_level, sample_count, delay):
        return '%s.%s.%02u.%03u.%04u.csv' % (
            self.band.name,
            self.start_time.strftime('%Y%m%d.%H%M%S'),
            power_level, 
            sample_count,
            delay)

    def do_hrs(self, line):
        line_parser = BandCmd.hrs_parser
        try:
            arguments = line_parser.parse_args(line.split())
        except SystemExit:
            line_parser.print_help()
            return False

        self.most_recent_hrs_arguments = arguments

        power_level = arguments.power_level
        sample_count = arguments.samples
        led_active = arguments.led
        delay = arguments.delay

        print delay

        output_path = os.path.join('research', self._csv_basename(power_level, sample_count, delay))

        method = (self.band.calibrate_hrs_start
                  if led_active
                  else self.band.hrs_start)
        method(power_level, delay, sample_count)
        data = self.band.hrs_read(sample_count)

        file = open(output_path, 'w' if arguments.overwrite else 'a')
        for i, value in enumerate(data):
            file.write('%u\n' % (value))
        file.close()

        for value in data:
            print "%3u" % value,
        print

    do_hrs.__doc__ = hrs_parser.format_help()

    # peak detection (PD)

    pd_parser = argparse.ArgumentParser()
    pd_parser.add_argument(
        '-t', '--threshold',
        type=float,
        default=None,
        help='peak detection threshold, defaults to None')

    def do_pd(self, line):
        line_parser = BandCmd.pd_parser

        try:
            line_arguments = line_parser.parse_args(line.split())
        except SystemExit:
            line_parser.print_help()
            return False

        arguments = self.most_recent_hrs_arguments

        cwd = os.getcwd()
        research_path = os.path.join(
            os.path.dirname(__file__), 
            'research')
        os.chdir(research_path)
        csv_path = self._csv_basename(
            arguments.power_level, 
            arguments.samples, 
            arguments.delay)

        peak_detect_cmd = 'tail -%u %s | python peak_detect.py %s100' % (
            arguments.samples,
            csv_path,
            '-t %u ' % line_arguments.threshold if line_arguments.threshold else ''
        )
        log.debug(peak_detect_cmd)

        subprocess.call(peak_detect_cmd, shell=True)
        os.chdir(cwd)

    do_pd.__doc__ = pd_parser.format_help()

    # IMU

    def do_imu_test(self, line):
        self.band.test_imu()
        # data = self.band.test_imu()

        # for i in range(0, hello.band.AG_SAMPLES, hello.band.AG_PACKET_SIZE):
        #     s = str(data[i:i+12])
        #     values = list(struct.unpack('<hhhhhh', s))
        #     print ' '.join(['%6hd' % value for value in values])

    # DFU

    def do_DFU(self, line):
        self.band.reset_to_DFU()
        return True
        
    # EOF

    def do_EOF(self, line):
        return True

def main(argv):
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument(
        'name',
        help='Name of band (e.g. Band, Andre)'
    )
    args = arg_parser.parse_args(argv[1:])

    band = hello.band.Band(args.name)
    band.connect()
    bandcmd = BandCmd(band)
    bandcmd.cmdloop()

if __name__ == '__main__':
    main(sys.argv)
    sys.exit(0)
